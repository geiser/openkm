# HELP: This will output the help for each task
.PHONY: help

help: ## This help.
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

.DEFAULT_GOAL := all

all: pull ## Pull the images to the project

pull: ## Pull images from docker.io to the project
	$(DC) -p $(APP_NAME) pull $(service)

clean: ## Remove containers and images related to the project
	@$(DC) -p $(APP_NAME) down --remove-orphans --rmi all 2>/dev/null \
	&& echo 'Image(s) for "$(APP_NAME)" removed.' \
	|| echo 'Image(s) for "$(APP_NAME)" already removed.'
	@rm docker-compose.service
	@rm Makefile

run: ## Run a project service in the terminal
ifndef service
	$(error service variable is not set. Use 'make run service={service}')
else
	$(DC) -p $(APP_NAME) run --rm --service-ports $(service)
endif

shell: ## Run interactive shell in the container of service
ifndef service
	$(error service variable is not set. Use 'make shell service={service}')
else
	$(DC) -p $(APP_NAME) run --rm --entrypoint /bin/bash $(service)
endif

up: ## Spin up the project services as containers
	$(DC) -p $(APP_NAME) up --no-build -d $(service)

start: stop ## Start the project services as containers
	$(DC) -p $(APP_NAME) start $(service)

stop: ## Stop the project services running as container
	$(DC) -p $(APP_NAME) stop $(service)

down: stop ## Stop and remove the project services running as containers
	$(DC) -p $(APP_NAME) down -v

# Docker installing as systemd
install: all ## Install a service of the project as systemd
	@mkdir -p $(PREFIX)
ifneq ($(shell pwd),$(PREFIX))
	@cp -v *.yml $(PREFIX)
endif
	@cp -v docker-compose.service /etc/systemd/system/$(APP_NAME)@.service

# HELPERS
prune: ## clean all that is not actively used
	$(DD) system prune -af

version: ## output to version
ifndef service
	$(error service variable is not set. Use 'make version service={service}')
else
	@echo $(services_$(service)_build_target)
endif
